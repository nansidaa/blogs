(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{526:function(t,s,a){"use strict";a.r(s);var r=a(2),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("git config\n配置 Git 的相关参数。\nGit 一共有3个配置文件：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 仓库级的配置文件：在仓库的 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitconfig，该配置文件只对所在的仓库有效。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 全局配置文件：Mac 系统在 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitconfig，Windows 系统在 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\\Users\\"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("用户名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitconfig。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("local"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("git）的 etc 文件夹中的 gitconfig。\n\n# 查看配置信息\n# "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local：仓库级，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global：全局级，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system：系统级\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("l\n\n# 查看当前生效的配置信息\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("l\n\n# 编辑配置文件\n# "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local：仓库级，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global：全局级，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system：系统级\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("e\n\n# 添加配置项\n# "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local：仓库级，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global：全局级，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system：系统级\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 获取配置项\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("get "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 删除配置项\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("local "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("unset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 配置提交记录中的用户信息\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("用户名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("邮箱地址"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 更改Git缓存区的大小\n# 如果提交的内容较大，默认缓存较小，提交会失败\n# 缓存大小单位："),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("，例如："),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("524288000")]),t._v("（500MB）\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("postBuffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("缓存大小"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 调用 git status"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("git diff 命令时以高亮或彩色方式显示改动状态\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ui "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n# 配置可以缓存密码，默认缓存时间"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("分钟\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global credential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("helper cache\n\n# 配置密码的缓存时间\n# 缓存时间单位：秒\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global credential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("helper "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cache --timeout=<缓存时间>'")]),t._v("\n\n# 配置长期存储密码\n$ git config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global credential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("helper store\n\n\n\ngit clone\n从远程仓库克隆一个版本库到本地。\n\n# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下\n$ git clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的网址"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 指定本地仓库的目录\n$ git clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的网址"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地目录"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b 指定要克隆的分支，默认是master分支\n$ git clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的网址"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地目录"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit init\n初始化项目所在目录，初始化后会在当前目录下出现一个名为 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git 的目录。\n\n# 初始化本地仓库，在当前目录下生成 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git 文件夹\n$ git init\n\n\n\ngit status\n查看本地仓库的状态。\n\n# 查看本地仓库的状态\n$ git status\n\n# 以简短模式查看本地仓库的状态\n# 会显示两列，第一列是文件的状态，第二列是对应的文件\n# 文件状态："),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" 新增，"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("M")]),t._v(" 修改，"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" 删除，"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" 未添加到Git中\n$ git status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s\n\n\n\ngit remote\n操作远程库。\n\n# 列出已经存在的远程仓库\n$ git remote\n\n# 列出远程仓库的详细信息，在别名后面列出"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("地址\n$ git remote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n$ git remote "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("verbose\n\n# 添加远程仓库\n$ git remote add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("地址"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 修改远程仓库的别名\n$ git remote rename "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("原远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 删除指定名称的远程仓库\n$ git remote remove "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 修改远程仓库的 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" 地址\n$ git remote set"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新的远程仓库"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("地址"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit branch\n操作 Git 的分支命令。\n\n# 列出本地的所有分支，当前所在分支以 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v(" 标出\n$ git branch\n\n# 列出本地的所有分支并显示最后一次提交，当前所在分支以 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v(" 标出\n$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n\n# 创建新分支，新的分支基于上一次提交建立\n$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 修改分支名称\n# 如果不指定原分支名称则为当前所在分支\n$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("原分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新的分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n# 强制修改分支名称\n$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("M")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("原分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("新的分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 删除指定的本地分支\n$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 强制删除指定的本地分支\n$ git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit checkout\n检出命令，用于创建、切换分支等。\n\n# 切换到已存在的指定分支\n$ git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 创建并切换到指定的分支，保留所有的提交记录\n# 等同于 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git branch"')]),t._v(" 和 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git checkout"')]),t._v(" 两个命令合并\n$ git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 创建并切换到指定的分支，删除所有的提交记录\n$ git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("orphan "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响\n$ git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit cherry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("pick\n把已经提交的记录合并到当前分支。\n\n# 把已经提交的记录合并到当前分支\n$ git cherry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("pick "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit add\n把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。\n\n# 把指定的文件添加到暂存区中\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 添加所有修改、已删除的文件到暂存区中\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("update "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 添加所有修改、已删除、新增的文件到暂存区中，省略 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 即为当前目录\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("all "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 查看所有修改、已删除但没有提交的文件，进入一个子命令系统\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ git add "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("interactive "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n\ngit commit\n将暂存区中的文件提交到本地仓库中。\n\n# 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息\n$ git commit\n\n# 把暂存区中的文件提交到本地仓库中并添加描述信息\n$ git commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<提交的描述信息>"')]),t._v("\n\n# 把所有修改、已删除的文件提交到本地仓库中\n# 不包括未被版本库跟踪的文件，等同于先调用了 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add -u"')]),t._v("\n$ git commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<提交的描述信息>"')]),t._v("\n\n# 修改上次提交的描述信息\n$ git commit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("amend\n\n\n\ngit fetch\n从远程仓库获取最新的版本到本地的 tmp 分支上。\n\n# 将远程仓库所有分支的最新版本全部取回到本地\n$ git fetch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 将远程仓库指定分支的最新版本取回到本地\n$ git fetch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit merge\n合并分支。\n\n# 把指定的分支合并到当前所在的分支下\n$ git merge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit diff\n比较版本之间的差异。\n\n# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改\n$ git diff\n\n# 比较暂存区中的文件和上次提交时的差异\n$ git diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cached\n$ git diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("staged\n\n# 比较当前文件和上次提交时的差异\n$ git diff "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("\n\n# 查看从指定的版本之后改动的内容\n$ git diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 比较两个分支之间的差异\n$ git diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 查看两个分支分开后各自的改动内容\n$ git diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit pull\n从远程仓库获取最新版本并合并到本地。\n首先会执行 git fetch，然后执行 git merge，把获取的分支的 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" 合并到当前分支。\n\n# 从远程仓库获取最新版本。\n$ git pull\n\n\n\ngit push\n把本地仓库的提交推送到远程仓库。\n\n# 把本地仓库的分支推送到远程仓库的指定分支\n$ git push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 删除指定的远程仓库的分支\n$ git push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ git push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit log\n显示提交的记录。\n\n# 打印所有的提交记录\n$ git log\n\n# 打印从第一次提交到指定的提交的记录\n$ git log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 打印指定数量的最新提交的记录\n$ git log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("指定的数量"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit reset\n还原提交记录。\n\n# 重置暂存区，但文件不受影响\n# 相当于将用 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" 命令更新到暂存区的内容撤出暂存区，可以指定文件\n# 没有指定 commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),t._v(" 则默认为当前 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("\n$ git reset "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ git reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("mixed "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 将 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" 的指向改变，撤销到指定的提交记录，文件未修改\n$ git reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ git reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("mixed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 将 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" 的指向改变，撤销到指定的提交记录，文件未修改\n# 相当于调用 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git reset --mixed"')]),t._v(" 命令后又做了一次 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v("\n$ git reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("soft "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 将 "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" 的指向改变，撤销到指定的提交记录，文件也修改了\n$ git reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit revert\n生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。\n\n# 生成一个新的提交来撤销某次提交\n$ git revert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit tag\n操作标签的命令。\n\n# 打印所有的标签\n$ git tag\n\n# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录\n$ git tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 添加带有描述信息的附注标签，可以指定之前的提交记录\n$ git tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签描述信息"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 切换到指定的标签\n$ git checkout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 查看标签的信息\n$ git show "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 删除指定的标签\n$ git tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 将指定的标签提交到远程仓库\n$ git push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 将本地所有的标签全部提交到远程仓库\n$ git push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库的别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" –tags\n\n\n\ngit mv\n重命名文件或者文件夹。\n\n# 重命名指定的文件或者文件夹\n$ git mv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("源文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("文件夹"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("目标文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("文件夹"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n\n\ngit rm\n删除文件或者文件夹。\n\n# 移除跟踪指定的文件，并从本地仓库的文件夹中删除\n$ git rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除\n$ git rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("文件夹路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件\n$ git rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cached\n\n\n\nGit操作场景示例\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 删除掉本地不存在的远程分支\n多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("all 依然会显示该远程分支，可使用下列的命令进行删除：\n\n# 使用 pull 命令，添加 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p 参数\n$ git pull "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p\n\n# 等同于下面的命令\n$ git fetch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p\n$ git fetch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("prune origin\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);